#!/bin/bash

# Compare an expected IP with results from a dig DNS lookup.
#
# Repository: https://github.com/middlebury/https-certificate-test
# Author: Adam Franco https://github.com/adamfranco
# License: GNU General Public License version 3 or later


# Set up our environment and variables
usage="Compare an expected IP with results from a dig DNS lookup.

usage:
$0 [-h] <ip-address> <hostname_1> [... <hostname_n>]
or pipe hostnames via stdin:
echo \"<hostname_1>
...
<hostname_n>\" | $0 <ip-address>

Options:
  Native:
    -h --help         Show this help

"

# Print help for this script
for var in "$@"
do
  if [[ "$var" == "-h" || "$var" == "--help" || "$var" == "-?" ]]; then
    echo "$usage"
    exit 1
  fi
done

# Shift any arguments beginning with "-" to be passed to CURL
CURL_OPTS=""
while [[ $1 =~ ^--?.+$ ]]; do
  # If the next argument looks like our IP Address, just add the opt alone.
  if [[ $2 =~ ^([0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3})|([0-9a-fA-F]{0,4}:[0-9a-fA-F]{0,4}:?[0-9a-fA-F]{0,4}:?[0-9a-fA-F]{0,4}:?[0-9a-fA-F]{0,4}:?[0-9a-fA-F]{0,4}:?[0-9a-fA-F]{0,4}:[0-9a-fA-F]{0,4})$ ]]; then
    CURL_OPTS="$CURL_OPTS $1"
    shift
  # If the next argument look like another option, just add the opt alone.
  elif [[ $2 =~ ^--?.+$ ]]; then
    CURL_OPTS="$CURL_OPTS $1"
    shift
  else
    CURL_OPTS="$CURL_OPTS $1 $2"
    shift
    shift
  fi
done

# Ensure that the config-section parameter is passed and that it is one of our sections
IP_ADDRESS=$1
if [ -z "$IP_ADDRESS" ]; then
  echo "$usage"
  echo "    <ip-address> must not be empty"
  exit 12
fi

if ! [[ "$IP_ADDRESS" =~ ^([0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3})|([0-9a-fA-F]{0,4}:[0-9a-fA-F]{0,4}:?[0-9a-fA-F]{0,4}:?[0-9a-fA-F]{0,4}:?[0-9a-fA-F]{0,4}:?[0-9a-fA-F]{0,4}:?[0-9a-fA-F]{0,4}:[0-9a-fA-F]{0,4})$ ]]; then
  echo "$usage"
  echo "    <ip-address> \"$IP_ADDRESS\" must be an IPv4 or IPv6 address"
  exit 13
fi

shift
HOSTNAMES=()

# Load any sites from positional parameters
for param in $@; do
	if [[ $param =~ ^.+\..+$ ]]; then
		HOSTNAMES=("${HOSTNAMES[@]}" "$param")
	else
		echo "Warning: $param does not look like a hostname."
	fi
done

# IF no hostnames were passed as arguments,
# load any hostnames specified in STDIN
if [ ${#@} -lt 1 ]; then
	while read -t3 line; do
    if [[ ${line} =~ ^\s*# ]]; then
      # Ignore lines beginning with # as comments.
      :
		elif [[ ${line} =~ ^.+\..+$ ]]; then
			HOSTNAMES=("${HOSTNAMES[@]}" "${line}")
		elif [ -z "${line}" ]; then
			# Do nothing
			:
		else
			echo "Warning: $param does not look like a hostname."
		fi
	done < /dev/stdin
fi

if [ ${#HOSTNAMES[@]} -lt 1 ]; then
	echo "Error: No hostnames were specified."
	echo "$usage"
	exit 20
fi

# Check the certificate of each hostname.
for HOSTNAME in "${HOSTNAMES[@]}"
do
	printf '%-60s' "${HOSTNAME}"
  DNS_IP=$(dig "$HOSTNAME" +short | tail -n 1)
  if [[ "$DNS_IP" == "$IP_ADDRESS" ]]; then
    echo "OK"
  else
    echo "Mismatched IPS: $DNS_IP seen, expected $IP_ADDRESS"
  fi
done
